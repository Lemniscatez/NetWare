using Photon.Pun;
using UnityEngine;

namespace NetWare
{
    public class Exploits : MonoBehaviour
    {
        public static void Execute()
        {
            // player
            if (!Config.GetBool("exploits.other.autoplay"))
            {
                LocalPlayer.GetHealth()?.SetPlayerImmunity(Config.GetBool("exploits.player.godmode"));
            }

            if (Config.GetBool("exploits.player.instantland"))
            {
                LocalPlayer.GetThirdPersonController()?.SetDiveState(false);
            }

            if (Config.GetBool("exploits.player.infinitematerials"))
            {
                Access.SetValue(
                    LocalPlayer.GetPlayerBuildingManager()?.buildingManager,
                    "OLDOMPKABCM",
                    1000
                );
            }

            if (Config.GetBool("exploits.player.antifreeze"))
            {
                LocalPlayer.Get()?.photonView?.gameObject?.SetActive(true);
            }

            // other
            if (Config.GetBool("exploits.other.autoplay"))
            {
                // update timer
                autoPlayTimer++;

                // godmode
                LocalPlayer.GetHealth()?.SetPlayerImmunity(true);

                if (autoPlayTimer >= 2)
                {
                    // play again
                    FindObjectOfType<MatchResultScreen>()?.PlayAgainPressed();

                    if (autoPlayTimer >= 6)
                    {
                        // kill everyone
                        Network.BecomeMasterClient();
                        
                        foreach (PlayerController playerController in Storage.players)
                        {
                            if (Players.IsPlayerValid(playerController) && !Players.IsPlayerTeammate(playerController))
                            {
                                playerController?.photonView?.RPC(
                                    "TakeHit",
                                    RpcTarget.All,
                                    new object[] {
                                        100000,
                                        playerController?.transform.position,
                                        playerController?.photonView?.CreatorActorNr,
                                        true
                                    }
                                );
                            }
                        }
                    }
                }

                // reset timer
                if (autoPlayTimer >= 10)
                {
                    autoPlayTimer = 0;
                }
            }

            // world
            if (Config.GetBool("exploits.world.buildingspam") && Storage.players.Length > 0)
            {
                buildingSpammerTimer++;

                if (buildingSpammerTimer > 6)
                {
                    Network.BecomeMasterClient();

                    PlayerController playerController = Storage.players[Random.Range(0, Storage.players.Length)];

                    if (Players.IsPlayerValid(playerController) && !Players.IsPlayerTeammate(playerController))
                    {
                        Vector3 buildingPosition = playerController.OBPJMLEMMCN;
                        BuildingNetworkController buildingNetworkController = Network.GetBuildingNetworkController();

                        if (buildingNetworkController != null)
                        {
                            buildingNetworkController.CreateBuilding(HABLAODDMOK.Wall, buildingPosition, Quaternion.identity);
                            buildingNetworkController.CreateBuilding(HABLAODDMOK.Floor, buildingPosition, Quaternion.identity);
                            buildingNetworkController.CreateBuilding(HABLAODDMOK.Ramp, buildingPosition, Quaternion.identity);
                            buildingNetworkController.CreateBuilding(HABLAODDMOK.Roof, buildingPosition, Quaternion.identity);
                        }
                    }

                    buildingSpammerTimer = 0;
                }
            }

            if (Config.GetBool("exploits.world.rigspam"))
            {
                rigSpamTimer++;

                if (rigSpamTimer > 10)
                {
                    PlayerController localPlayer = LocalPlayer.Get();

                    if (localPlayer != null)
                    {
                        PhotonNetwork.Instantiate("PolyPlayer", localPlayer.gameObject.transform.position, Quaternion.identity, 0, null);
                    }

                    rigSpamTimer = 0;
                }
            }

            PlayerBuildingManager.IsOneHitBuildings = Config.GetBool("exploits.world.instantbreak");

            // locker
            if (pickaxeChangerTimer >= 10)
            {
                ServerUser serverUser = FirebaseManager.LIPLNDMKLDB?.IPGFHABIDAC;

                if (serverUser != null)
                {
                    string[] pickaxes = { "Default", "Galactic Smasher", "Warhammer", "Chicken Axe" };
                    foreach (string pickaxe in pickaxes)
                    {
                        string pickaxeId = ("lol.1v1.weaponskins.melee.pickaxe." + pickaxe.ToLower().Replace(" ", ""));
                        if (pickaxe == "Galactic Smasher") {
                            pickaxeId = "lol.1v1.weaponskins.melee.pickaxe.scifihammer";
                        }
                        else if (pickaxe == "Chicken Axe") {
                            pickaxeId = "lol.1v1.weaponskins.melee.pickaxe.chicken_leg";
                        }
                        
                        if (serverUser.Skins.EquippedWeaponSkins.Contains(pickaxeId))
                        {
                            serverUser.Skins.EquippedWeaponSkins.Remove(pickaxeId);
                        }
                        if (serverUser.Skins.WeaponSkins.Contains(pickaxeId))
                        {
                            serverUser.Skins.WeaponSkins.Remove(pickaxeId);
                        }
                    }

                    if (pickaxeChangerValue == "Default") {
                        serverUser.Skins.EquippedWeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.default");
                        serverUser.Skins.WeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.default");
                    }
                    else if (pickaxeChangerValue == "Galactic Smasher") {
                        serverUser.Skins.EquippedWeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.scifihammer");
                        serverUser.Skins.WeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.scifihammer");
                    }
                    else if (pickaxeChangerValue == "Warhammer") {
                        serverUser.Skins.EquippedWeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.warhammer");
                        serverUser.Skins.WeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.warhammer");
                    }
                    else if (pickaxeChangerValue == "Chicken Axe") {
                        serverUser.Skins.EquippedWeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.chicken_leg");
                        serverUser.Skins.WeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.chicken_leg");
                    }
                }
                
                pickaxeChangerTimer = 0;
            }
            pickaxeChangerTimer++;
        }

        public static void Tab()
        {
            Menu.Begin();

            Menu.NewSection("Player");
            Config.SetBool(
                "exploits.player.godmode",
                Menu.NewToggle(
                    Config.GetBool("exploits.player.godmode"),
                    "Godmode"
                )
            );
            Config.SetBool(
                "exploits.player.instantland",
                Menu.NewToggle(
                    Config.GetBool("exploits.player.instantland"),
                    "Instant Land"
                )
            );
            Config.SetBool(
                "exploits.player.infinitematerials",
                Menu.NewToggle(
                    Config.GetBool("exploits.player.infinitematerials"),
                    "Infinite Materials"
                )
            );
            Config.SetBool(
                "exploits.player.antifreeze",
                Menu.NewToggle(
                    Config.GetBool("exploits.player.antifreeze"),
                    "Anti Freeze"
                )
            );

            Menu.NewSection("Other");
            Config.SetBool(
                "exploits.other.autoplay",
                Menu.NewToggle(
                    Config.GetBool("exploits.other.autoplay"),
                    "Auto Play"
                )
            );

            Menu.Separate();

            Menu.NewSection("World");
            Menu.NewButton("Kill All", KillAll);
            Menu.NewButton("Freeze Players", FreezePlayers);
            Menu.NewButton("Destroy Buildings", DestroyBuildings);
            Menu.NewButton("Open Crates", OpenCrates);
            Config.SetBool(
                "exploits.world.buildingspam",
                Menu.NewToggle(
                    Config.GetBool("exploits.world.buildingspam"),
                    "Building Spam"
                )
            );
            Config.SetBool(
                "exploits.world.rigspam",
                Menu.NewToggle(
                    Config.GetBool("exploits.world.rigspam"),
                    "Rig Spam"
                )
            );
            Config.SetBool(
                "exploits.world.instantbreak",
                Menu.NewToggle(
                    Config.GetBool("exploits.world.instantbreak"),
                    "Instant Break"
                )
            );

            Menu.NewSection("Locker");
            Menu.NewButton("Unlock Emotes", UnlockEmotes);
            Menu.NewButton("Unlock Stickers", UnlockStickers);
            Menu.NewTitle("Skins");
            changeSkinId = Menu.NewTextField("Skin ID", changeSkinId);
            Menu.NewButton("Change Skin", ChangeSkin);
            pickaxeChangerValue = Menu.NewList("Pickaxe Changer", pickaxeChangerValue, new string[] { "Default", "Galactic Smasher", "Warhammer", "Chicken Axe" });

            Menu.End();
        }
        
        // internal methods and variables
        private static int buildingSpammerTimer = 0;
        private static int autoPlayTimer = 0;
        private static int rigSpamTimer = 0;
        private static string changeSkinId = "293";
        private static string pickaxeChangerValue = "Default";
        private static int pickaxeChangerTimer = 0;

        private static void UnlockEmotes()
        {
            ServerUser serverUser = FirebaseManager.LIPLNDMKLDB?.IPGFHABIDAC;

            if (serverUser != null)
            {
                for (int index = 1; index <= 100; index++)
                {
                    serverUser.Skins.OwnedEmotes.Add("lol.1v1.playeremotes.pack." + index);
                }
            }
        }
        private static void UnlockStickers()
        {
            ServerUser serverUser = FirebaseManager.LIPLNDMKLDB?.IPGFHABIDAC;

            if (serverUser != null)
            {
                for (int index = 1; index <= 100; index++)
                {
                    serverUser.Skins.OwnedEmotes.Add("lol.1v1.playerstickers.pack." + index);
                }
            }
        }
        private static void ChangeSkin()
        {
            ServerUser serverUser = FirebaseManager.LIPLNDMKLDB?.IPGFHABIDAC;

            if (serverUser != null && int.TryParse(changeSkinId, out _))
            {
                serverUser.Skins.EquippedCharacterSkin = ("lol.1v1.playerskins.pack." + changeSkinId);
            }
        }

        private static void KillAll()
        {
            Network.BecomeMasterClient();

            foreach (PlayerController playerController in Storage.players)
            {
                if (!playerController.IsMine() && Players.IsPlayerAlive(playerController) && !Players.IsPlayerTeammate(playerController))
                {
                    playerController.photonView.RPC(
                        "TakeHit",
                        RpcTarget.All,
                        new object[] {
                            100000,
                            playerController.transform.position,
                            playerController.photonView.CreatorActorNr,
                            true
                        }
                    );
                }
            }
        }

        private static void FreezePlayers()
        {
            Network.BecomeMasterClient();

            foreach (PlayerController playerController in Storage.players)
            {
                if (!playerController.photonView.IsMine && Players.IsPlayerAlive(playerController) && !Players.IsPlayerTeammate(playerController))
                {
                    PhotonNetwork.DestroyPlayerObjects(playerController.photonView.Controller);
                }
            }
        }

        private static void DestroyBuildings()
        {
            Network.BecomeMasterClient();

            Network.GetBuildingNetworkController()?.KillAllBuildings(true);
        }

        private static void OpenCrates()
        {
            Network.BecomeMasterClient();

            PlayerController playerController = LocalPlayer.Get();

            if (playerController != null)
            {
                foreach (SupplyCrate supplyCrate in FindObjectsOfType<SupplyCrate>())
                {
                    supplyCrate.OpenCrate(playerController);
                }
            }
        }
    }
}
